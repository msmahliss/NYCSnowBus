0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'install', 'request', '-g' ]
2 info using npm@1.3.2
3 info using node@v0.10.13
4 verbose node symlink /usr/bin/node
5 verbose cache add [ 'request', null ]
6 verbose cache add name=undefined spec="request" args=["request",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: 'request',
7 verbose parsed url   path: 'request',
7 verbose parsed url   href: 'request' }
8 silly lockFile 088e29b0-request request
9 verbose lock request /home/ubuntu/.npm/088e29b0-request.lock
10 silly lockFile 088e29b0-request request
11 silly lockFile 088e29b0-request request
12 verbose addNamed [ 'request', '' ]
13 verbose addNamed [ null, '*' ]
14 silly lockFile 9d461bcf-request request@
15 verbose lock request@ /home/ubuntu/.npm/9d461bcf-request.lock
16 silly addNameRange { name: 'request', range: '*', hasData: false }
17 verbose url raw request
18 verbose url resolving [ 'https://registry.npmjs.org/', './request' ]
19 verbose url resolved https://registry.npmjs.org/request
20 info trying registry request attempt 1 at 23:26:27
21 verbose etag "987SGAPF0XOGEUBUXBL3MQVNU"
22 http GET https://registry.npmjs.org/request
23 http 200 https://registry.npmjs.org/request
24 silly registry.get cb [ 200,
24 silly registry.get   { vary: 'Accept',
24 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
24 silly registry.get     etag: '"7YFR6HSLDUZKES4SQFK7DSYZG"',
24 silly registry.get     date: 'Tue, 26 Nov 2013 23:26:36 GMT',
24 silly registry.get     'content-type': 'application/json',
24 silly registry.get     'content-length': '415719' } ]
25 silly addNameRange number 2 { name: 'request', range: '*', hasData: true }
26 silly addNameRange versions [ 'request',
26 silly addNameRange   [ '0.10.0',
26 silly addNameRange     '0.8.3',
26 silly addNameRange     '0.9.0',
26 silly addNameRange     '0.9.1',
26 silly addNameRange     '0.9.5',
26 silly addNameRange     '1.0.0',
26 silly addNameRange     '1.1.0',
26 silly addNameRange     '1.1.1',
26 silly addNameRange     '1.2.0',
26 silly addNameRange     '1.9.0',
26 silly addNameRange     '1.9.1',
26 silly addNameRange     '1.9.2',
26 silly addNameRange     '1.9.3',
26 silly addNameRange     '1.9.5',
26 silly addNameRange     '1.9.7',
26 silly addNameRange     '1.9.8',
26 silly addNameRange     '1.9.9',
26 silly addNameRange     '2.0.0',
26 silly addNameRange     '2.0.1',
26 silly addNameRange     '2.0.2',
26 silly addNameRange     '2.0.3',
26 silly addNameRange     '2.0.4',
26 silly addNameRange     '2.0.5',
26 silly addNameRange     '2.1.0',
26 silly addNameRange     '2.1.1',
26 silly addNameRange     '2.2.0',
26 silly addNameRange     '2.2.5',
26 silly addNameRange     '2.2.6',
26 silly addNameRange     '2.2.9',
26 silly addNameRange     '2.9.0',
26 silly addNameRange     '2.9.1',
26 silly addNameRange     '2.9.2',
26 silly addNameRange     '2.9.3',
26 silly addNameRange     '2.9.100',
26 silly addNameRange     '2.9.150',
26 silly addNameRange     '2.9.151',
26 silly addNameRange     '2.9.152',
26 silly addNameRange     '2.9.153',
26 silly addNameRange     '2.9.200',
26 silly addNameRange     '2.9.201',
26 silly addNameRange     '2.9.202',
26 silly addNameRange     '2.9.203',
26 silly addNameRange     '2.10.0',
26 silly addNameRange     '2.11.0',
26 silly addNameRange     '2.11.1',
26 silly addNameRange     '2.11.2',
26 silly addNameRange     '2.11.3',
26 silly addNameRange     '2.11.4',
26 silly addNameRange     '2.12.0',
26 silly addNameRange     '2.14.0',
26 silly addNameRange     '2.16.0',
26 silly addNameRange     '2.16.2',
26 silly addNameRange     '2.16.4',
26 silly addNameRange     '2.16.6',
26 silly addNameRange     '2.18.0',
26 silly addNameRange     '2.19.0',
26 silly addNameRange     '2.20.0',
26 silly addNameRange     '2.21.0',
26 silly addNameRange     '2.22.0',
26 silly addNameRange     '2.23.0',
26 silly addNameRange     '2.24.0',
26 silly addNameRange     '2.25.0',
26 silly addNameRange     '2.26.0',
26 silly addNameRange     '2.27.0' ] ]
27 verbose addNamed [ 'request', '2.27.0' ]
28 verbose addNamed [ '2.27.0', '2.27.0' ]
29 silly lockFile 7b48fbe0-request-2-27-0 request@2.27.0
30 verbose lock request@2.27.0 /home/ubuntu/.npm/7b48fbe0-request-2-27-0.lock
31 silly lockFile 7b48fbe0-request-2-27-0 request@2.27.0
32 silly lockFile 7b48fbe0-request-2-27-0 request@2.27.0
33 silly lockFile 9d461bcf-request request@
34 silly lockFile 9d461bcf-request request@
35 silly resolved [ { name: 'request',
35 silly resolved     description: 'Simplified HTTP request client.',
35 silly resolved     tags: [ 'http', 'simple', 'util', 'utility' ],
35 silly resolved     version: '2.27.0',
35 silly resolved     author: { name: 'Mikeal Rogers', email: 'mikeal.rogers@gmail.com' },
35 silly resolved     repository: { type: 'git', url: 'http://github.com/mikeal/request.git' },
35 silly resolved     bugs: { url: 'http://github.com/mikeal/request/issues' },
35 silly resolved     engines: [ 'node >= 0.8.0' ],
35 silly resolved     main: 'index.js',
35 silly resolved     dependencies:
35 silly resolved      { qs: '~0.6.0',
35 silly resolved        'json-stringify-safe': '~5.0.0',
35 silly resolved        'forever-agent': '~0.5.0',
35 silly resolved        'tunnel-agent': '~0.3.0',
35 silly resolved        'http-signature': '~0.10.0',
35 silly resolved        hawk: '~1.0.0',
35 silly resolved        'aws-sign': '~0.3.0',
35 silly resolved        'oauth-sign': '~0.3.0',
35 silly resolved        'cookie-jar': '~0.3.0',
35 silly resolved        'node-uuid': '~1.4.0',
35 silly resolved        mime: '~1.2.9',
35 silly resolved        'form-data': '~0.1.0' },
35 silly resolved     scripts: { test: 'node tests/run.js' },
35 silly resolved     readme: '# Request -- Simplified HTTP client\n\n[![NPM](https://nodei.co/npm/request.png)](https://nodei.co/npm/request/)\n\n## Super simple to use\n\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```javascript\nvar request = require(\'request\');\nrequest(\'http://www.google.com\', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body) // Print the google web page.\n  }\n})\n```\n\n## Streaming\n\nYou can stream any response to a file stream.\n\n```javascript\nrequest(\'http://google.com/doodle.png\').pipe(fs.createWriteStream(\'doodle.png\'))\n```\n\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types, in this case `application/json`, and use the proper content-type in the PUT request if one is not already provided in the headers.\n\n```javascript\nfs.createReadStream(\'file.json\').pipe(request.put(\'http://mysite.com/obj.json\'))\n```\n\nRequest can also pipe to itself. When doing so the content-type and content-length will be preserved in the PUT headers.\n\n```javascript\nrequest.get(\'http://google.com/img.png\').pipe(request.put(\'http://mysite.com/img.png\'))\n```\n\nNow let\'s get fancy.\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    if (req.method === \'PUT\') {\n      req.pipe(request.put(\'http://mysite.com/doodle.png\'))\n    } else if (req.method === \'GET\' || req.method === \'HEAD\') {\n      request.get(\'http://mysite.com/doodle.png\').pipe(resp)\n    }\n  }\n})\n```\n\nYou can also pipe() from a http.ServerRequest instance and to a http.ServerResponse instance. The HTTP method and headers will be sent as well as the entity-body data. Which means that, if you don\'t really care about security, you can do:\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    var x = request(\'http://mysite.com/doodle.png\')\n    req.pipe(x)\n    x.pipe(resp)\n  }\n})\n```\n\nAnd since pipe() returns the destination stream in node 0.5.x you can do one line proxying :)\n\n```javascript\nreq.pipe(request(\'http://mysite.com/doodle.png\')).pipe(resp)\n```\n\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\n\n```javascript\nvar r = request.defaults({\'proxy\':\'http://localproxy.com\'})\n\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    r.get(\'http://google.com/doodle.png\').pipe(resp)\n  }\n})\n```\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\n\n## Forms\n\n`request` supports `application/x-www-form-urlencoded` and `multipart/form-data` form uploads. For `multipart/related` refer to the `multipart` API.\n\nUrl encoded forms are simple\n\n```javascript\nrequest.post(\'http://service.com/upload\', {form:{key:\'value\'}})\n// or\nrequest.post(\'http://service.com/upload\').form({key:\'value\'})\n```\n\nFor `multipart/form-data` we use the [form-data](https://github.com/felixge/node-form-data) library by [@felixge](https://github.com/felixge). You don\'t need to worry about piping the form object or setting the headers, `request` will handle that for you.\n\n```javascript\nvar r = request.post(\'http://service.com/upload\')\nvar form = r.form()\nform.append(\'my_field\', \'my_value\')\nform.append(\'my_buffer\', new Buffer([1, 2, 3]))\nform.append(\'my_file\', fs.createReadStream(path.join(__dirname, \'doodle.png\'))\nform.append(\'remote_file\', request(\'http://google.com/doodle.png\'))\n```\n\n## HTTP Authentication\n\n```javascript\nrequest.get(\'http://some.server.com/\').auth(\'username\', \'password\', false);\n// or\nrequest.get(\'http://some.server.com/\', {\n  \'auth\': {\n    \'user\': \'username\',\n    \'pass\': \'password\',\n    \'sendImmediately\': false\n  }\n});\n```\n\nIf passed as an option, `auth` should be a hash containing values `user` || `username`, `password` || `pass`, and `sendImmediately` (optional).  The method form takes parameters `auth(username, password, sendImmediately)`.\n\n`sendImmediately` defaults to true, which will cause a basic authentication header to be sent.  If `sendImmediately` is `false`, then `request` will retry with a proper authentication header after receiving a 401 response from the server (which must contain a `WWW-Authenticate` header indicating the required authentication method).\n\nDigest authentication is supported, but it only works with `sendImmediately` set to `false` (otherwise `request` will send basic authentication on the initial request, which will probably cause the request to fail).\n\n## OAuth Signing\n\n```javascript\n// Twitter OAuth\nvar qs = require(\'querystring\')\n  , oauth =\n    { callback: \'http://mysite.com/callback/\'\n    , consumer_key: CONSUMER_KEY\n    , consumer_secret: CONSUMER_SECRET\n    }\n  , url = \'https://api.twitter.com/oauth/request_token\'\n  ;\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\n  // Ideally, you would take the body in the response\n  // and construct a URL that a user clicks on (like a sign in button).\n  // The verifier is only available in the response after a user has\n  // verified with twitter that they are authorizing your app.\n  var access_token = qs.parse(body)\n    , oauth =\n      { consumer_key: CONSUMER_KEY\n      , consumer_secret: CONSUMER_SECRET\n      , token: access_token.oauth_token\n      , verifier: access_token.oauth_verifier\n      }\n    , url = \'https://api.twitter.com/oauth/access_token\'\n    ;\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\n    var perm_token = qs.parse(body)\n      , oauth =\n        { consumer_key: CONSUMER_KEY\n        , consumer_secret: CONSUMER_SECRET\n        , token: perm_token.oauth_token\n        , token_secret: perm_token.oauth_token_secret\n        }\n      , url = \'https://api.twitter.com/1/users/show.json?\'\n      , params =\n        { screen_name: perm_token.screen_name\n        , user_id: perm_token.user_id\n        }\n      ;\n    url += qs.stringify(params)\n    request.get({url:url, oauth:oauth, json:true}, function (e, r, user) {\n      console.log(user)\n    })\n  })\n})\n```\n\n\n\n### request(options, callback)\n\nThe first argument can be either a url or an options object. The only required option is uri, all others are optional.\n\n* `uri` || `url` - fully qualified uri or a parsed url object from url.parse()\n* `qs` - object containing querystring values to be appended to the uri\n* `method` - http method, defaults to GET\n* `headers` - http headers, defaults to {}\n* `body` - entity body for PATCH, POST and PUT requests. Must be buffer or string.\n* `form` - when passed an object this will set `body` but to a querystring representation of value and adds `Content-type: application/x-www-form-urlencoded; charset=utf-8` header. When passed no option a FormData instance is returned that will be piped to request.\n* `auth` - A hash containing values `user` || `username`, `password` || `pass`, and `sendImmediately` (optional).  See documentation above.\n* `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header.  Additionally, parses the response body as json.\n* `multipart` - (experimental) array of objects which contains their own headers and `body` attribute. Sends `multipart/related` request. See example below.\n* `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n* `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n* `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n* `encoding` - Encoding to be used on `setEncoding` of response data. If set to `null`, the body is returned as a Buffer.\n* `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node\'s default maxSockets.\n* `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n* `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\n* `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it\'s supported with the `url` parameter by embedding the auth info in the uri.\n* `oauth` - Options for OAuth HMAC-SHA1 signing, see documentation above.\n* `hawk` - Options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example).\n* `strictSSL` - Set to `true` to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n* `jar` - Set to `true` if you want cookies to be remembered for future use, or define your custom cookie jar (see examples section)\n* `aws` - object containing aws signing information, should have the properties `key` and `secret` as well as `bucket` unless you\'re specifying your bucket as part of the path, or you are making a request that doesn\'t use a bucket (i.e. GET Services)\n* `httpSignature` - Options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent\'s library](https://github.com/joyent/node-http-signature). The `keyId` and `key` properties must be specified. See the docs for other options.\n* `localAddress` - Local interface to bind for network connections.\n\n\nThe callback argument gets 3 arguments. The first is an error when applicable (usually from the http.Client option not the http.ClientRequest object). The second is an http.ClientResponse object. The third is the response body String or Buffer.\n\n## Convenience methods\n\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\n\n### request.defaults(options)\n\nThis method returns a wrapper around the normal request API that defaults to whatever options you pass in to it.\n\n### request.put\n\nSame as request() but defaults to `method: "PUT"`.\n\n```javascript\nrequest.put(url)\n```\n\n### request.patch\n\nSame as request() but defaults to `method: "PATCH"`.\n\n```javascript\nrequest.patch(url)\n```\n\n### request.post\n\nSame as request() but defaults to `method: "POST"`.\n\n```javascript\nrequest.post(url)\n```\n\n### request.head\n\nSame as request() but defaults to `method: "HEAD"`.\n\n```javascript\nrequest.head(url)\n```\n\n### request.del\n\nSame as request() but defaults to `method: "DELETE"`.\n\n```javascript\nrequest.del(url)\n```\n\n### request.get\n\nAlias to normal request method for uniformity.\n\n```javascript\nrequest.get(url)\n```\n### request.cookie\n\nFunction that creates a new cookie.\n\n```javascript\nrequest.cookie(\'cookie_string_here\')\n```\n### request.jar\n\nFunction that creates a new cookie jar.\n\n```javascript\nrequest.jar()\n```\n\n\n## Examples:\n\n```javascript\n  var request = require(\'request\')\n    , rand = Math.floor(Math.random()*100000000).toString()\n    ;\n  request(\n    { method: \'PUT\'\n    , uri: \'http://mikeal.iriscouch.com/testjs/\' + rand\n    , multipart:\n      [ { \'content-type\': \'application/json\'\n        ,  body: JSON.stringify({foo: \'bar\', _attachments: {\'message.txt\': {follows: true, length: 18, \'content_type\': \'text/plain\' }}})\n        }\n      , { body: \'I am an attachment\' }\n      ]\n    }\n  , function (error, response, body) {\n      if(response.statusCode == 201){\n        console.log(\'document saved as: http://mikeal.iriscouch.com/testjs/\'+ rand)\n      } else {\n        console.log(\'error: \'+ response.statusCode)\n        console.log(body)\n      }\n    }\n  )\n```\nCookies are disabled by default (else, they would be used in subsequent requests). To enable cookies set jar to true (either in defaults or in the options sent).\n\n```javascript\nvar request = request.defaults({jar: true})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\n\nIf you to use a custom cookie jar (instead of letting request use its own global cookie jar) you do so by setting the jar default or by specifying it as an option:\n\n```javascript\nvar j = request.jar()\nvar request = request.defaults({jar:j})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\nOR\n\n```javascript\nvar j = request.jar()\nvar cookie = request.cookie(\'your_cookie_here\')\nj.add(cookie)\nrequest({url: \'http://www.google.com\', jar: j}, function () {\n  request(\'http://images.google.com\')\n})\n```\n',
35 silly resolved     readmeFilename: 'README.md',
35 silly resolved     _id: 'request@2.27.0',
35 silly resolved     _from: 'request@' } ]
36 info install request@2.27.0 into /usr/lib
37 info installOne request@2.27.0
38 info /usr/lib/node_modules/request unbuild
39 verbose tar unpack /home/ubuntu/.npm/request/2.27.0/package.tgz
40 silly lockFile 68bec1e8-tar-usr-lib-node-modules-request tar:///usr/lib/node_modules/request
41 verbose lock tar:///usr/lib/node_modules/request /home/ubuntu/.npm/68bec1e8-tar-usr-lib-node-modules-request.lock
42 silly lockFile d8af1c3e-u-npm-request-2-27-0-package-tgz tar:///home/ubuntu/.npm/request/2.27.0/package.tgz
43 verbose lock tar:///home/ubuntu/.npm/request/2.27.0/package.tgz /home/ubuntu/.npm/d8af1c3e-u-npm-request-2-27-0-package-tgz.lock
44 silly gunzTarPerm modes [ '755', '644' ]
45 error Error: EACCES, mkdir '/usr/lib/node_modules/request'
45 error  { [Error: EACCES, mkdir '/usr/lib/node_modules/request']
45 error   errno: 3,
45 error   code: 'EACCES',
45 error   path: '/usr/lib/node_modules/request',
45 error   fstream_type: 'Directory',
45 error   fstream_path: '/usr/lib/node_modules/request',
45 error   fstream_class: 'DirWriter',
45 error   fstream_stack:
45 error    [ '/usr/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23',
45 error      '/usr/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53',
45 error      'Object.oncomplete (fs.js:107:15)' ] }
46 error Please try running this command again as root/Administrator.
47 error System Linux 3.2.0-40-virtual
48 error command "/usr/bin/node" "/usr/bin/npm" "install" "request" "-g"
49 error cwd /home/ubuntu/SnowBus
50 error node -v v0.10.13
51 error npm -v 1.3.2
52 error path /usr/lib/node_modules/request
53 error fstream_path /usr/lib/node_modules/request
54 error fstream_type Directory
55 error fstream_class DirWriter
56 error code EACCES
57 error errno 3
58 error stack Error: EACCES, mkdir '/usr/lib/node_modules/request'
59 error fstream_stack /usr/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23
59 error fstream_stack /usr/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53
59 error fstream_stack Object.oncomplete (fs.js:107:15)
60 verbose exit [ 3, true ]
